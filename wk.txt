#include <iostream>
#include<string>
#include <windows.h>
#include<vector>
#include<algorithm>
#include<ctype.h>

using namespace std;

string my_replace(string str)
{
    string buff;
    const int DATE_FORMATE = 8;
    const int TIME_FORMATE = 6;

    for(int i = 0; i < DATE_FORMATE; i++){
        if(i < 2){
             buff += str[DATE_FORMATE -1 + (i - 1)];
             if(i == 1){
                 buff += ".";
             }
        }
        if(i > 1 && i < 4){
             buff += str[DATE_FORMATE - 1 + (i - 5)];
             if(i == 3){
                 buff += ".";
             }
        }
        if(i >= 4){
            buff += str[i - 4];
        }

    }
    buff += " ";

    if(str[DATE_FORMATE+TIME_FORMATE -2] == '0' && str[DATE_FORMATE+TIME_FORMATE -1] =='0')
    {
        for(int i = 0; i < ((str.size() - DATE_FORMATE) -2 )-2; i++)
        {
            buff += str[DATE_FORMATE + i];
            if( (i == 1) && (str.size() > DATE_FORMATE+(TIME_FORMATE -2))){
                buff += ":";
            }
        }
     }
    else
    {
        for(int i = 0; i < (str.size() - DATE_FORMATE) -2; i++)
        {

            if(i==TIME_FORMATE - 2){
                buff += "[";
            }
            buff += str[DATE_FORMATE + i];
            if( (i == 1) && (str.size() > DATE_FORMATE+(TIME_FORMATE -2))){
                buff += ":";
            }
            else{
                if(i==1){
                    buff += ":00";
                }
            }
            if( (i == 3) && (str.size() > DATE_FORMATE+TIME_FORMATE)){
                buff += ":";
            }
            if(i == TIME_FORMATE - 1){
                buff += "]";
            }
        }
   }
   return buff;
}


int main()
{
        vector<string> myvector;
        vector<string> rezvector;
        int index=0;
        WIN32_FIND_DATA win;
        char *buff = new char[255];


        for(int i = 0; i < 255; i++){
                 buff[i] = ' ';
        }

        HANDLE handl = FindFirstFile("C:\\проекты\\kaf_example\\*.txt*",&win);

        if(handl != INVALID_HANDLE_VALUE)
        {
            strcpy(buff,win.cFileName);
            cout<<"FILES:"<< endl;
            cout<< buff<< endl;
            string str = string(buff);

            myvector.push_back("");

            for(int i = 0; i < str.size(); i++){
                if(isdigit(str[i])){
                    myvector[index]+=str[i];
                }
            }

            for(int i = 0; i < 255; i++){
                buff[i] = ' ';
            }

            while(FindNextFile(handl,&win))
            {
                strcpy(buff,win.cFileName);
                cout<< buff<< endl;
                string str = string(buff);

                myvector.push_back("");
                index++;

                for(int i = 0; i < str.size(); i++){
                    if(isdigit(str[i])){
                        myvector[index] += str[i];
                    }
                }

                for(int i = 0; i < 255; i++){
                    buff[i] = ' ';
                }
            }
        }

        FindClose(handl);
        delete buff;

        sort(myvector.begin(), myvector.end());

        for (int i=0; i<myvector.size();i++)
        {
            string stroka =  my_replace(myvector[i]);
            rezvector.push_back(stroka);
        }

        cout<< endl;
        cout<<"REQUIRED FORMATE:"<<endl;
        for (int i=0; i<rezvector.size();i++)
        {
            cout<<rezvector[i]<<endl;
        }


    return 0;

}
